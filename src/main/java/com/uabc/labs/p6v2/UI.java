/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.uabc.labs.p6v2;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author us
 */
public class UI extends javax.swing.JFrame {
    private static final int[] sizes = {100,500,1000,1500,2000,3000,4000,5000,7000,10000};
    private createArrays CA1;
    private String type;
    private int[] selectedArray;
    private int[]selectedArrayReverse;
    private getArrays GA1;
    private XYSeriesCollection datos;
    private int arrayInt;
    private long[] QuickSort1;
    private long[] QuickSort2;
    private long[] QuickSort3;
    private long[] MergeSort1;
    private long[] MergeSort2;
    private long[] MergeSort3;
    private long[] ArraySort1;
    private long[] ArraySort2;
    private long[] ArraySort3;
    private long[] ParallelSort1;
    private long[] ParallelSort2;
    private long[] ParallelSort3;
    private ArrayList<long[]> array;
    /**
     * Creates new form UI
     */
    public UI() {
        this.arrayInt=1;
        this.array = new ArrayList<>();
        this.CA1 = new createArrays();
        this.GA1 = new getArrays();
        datos = new XYSeriesCollection();
        
        QuickSort1=new long[11];
        QuickSort2=new long[11];
        QuickSort3=new long[11];
        MergeSort1=new long[11];
        MergeSort2=new long[11];
        MergeSort3=new long[11];
        ArraySort1=new long[11];
        ArraySort2=new long[11];
        ArraySort3=new long[11];
        ParallelSort1=new long[11];
        ParallelSort2=new long[11];
        ParallelSort3=new long[11];
        getArray();
        createResultsFiles();
        getResultsArray();
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        desordenadoButton = new javax.swing.JButton();
        ordenadoButton = new javax.swing.JButton();
        invertirButton = new javax.swing.JButton();
        newResultsButton = new javax.swing.JButton();
        typeBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        verTodoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Ver resultados:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 180, -1));

        desordenadoButton.setText("todo Desordenado");
        desordenadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desordenadoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(desordenadoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        ordenadoButton.setText("todo ordenado");
        ordenadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenadoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ordenadoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        invertirButton.setText("invertir Orden");
        invertirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertirButtonActionPerformed(evt);
            }
        });
        getContentPane().add(invertirButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        newResultsButton.setText("Obtener Nuevos Resultados");
        newResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newResultsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newResultsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, -1, -1));

        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar","QuickSort", "MergeSort", "Arrays.Sort", "ParallelSort" }));
        typeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeBoxActionPerformed(evt);
            }
        });
        getContentPane().add(typeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        jLabel2.setText("Seleccionar tipo de ordenamiento: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, -1, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 10, 250));

        verTodoButton.setText("Ver Todo");
        verTodoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verTodoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(verTodoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void desordenadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desordenadoButtonActionPerformed
        System.out.println(Arrays.toString(getArrayDesordenado(type)));    
        createAndShowChart("Desordenados - tiempo total", getArrayDesordenado(type));
    }//GEN-LAST:event_desordenadoButtonActionPerformed

    private void ordenadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenadoButtonActionPerformed
            createAndShowChart("Ordenados - tiempo total", getArrayOrdenado(type));
    }//GEN-LAST:event_ordenadoButtonActionPerformed

    private void invertirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertirButtonActionPerformed
            createAndShowChart("Invertir Orden - tiempo total", getArrayInvertido(type));
    }//GEN-LAST:event_invertirButtonActionPerformed

    private void newResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newResultsButtonActionPerformed
        arrayInt=1;
        GA1.removeAll();
        CA1.create();
        createResultsFiles();
        array=new ArrayList<>();
        getResultsArray();
    }//GEN-LAST:event_newResultsButtonActionPerformed

    private void typeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeBoxActionPerformed
        type = (String)typeBox.getSelectedItem();
        
    }//GEN-LAST:event_typeBoxActionPerformed

    private void verTodoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verTodoButtonActionPerformed
       
            useAll(type);
        

    }//GEN-LAST:event_verTodoButtonActionPerformed

    private void createAndShowChart(String seriesName, long[] data) {
        XYSeries series = new XYSeries(seriesName);
        for (int i = 0; i < data.length; i++) {
            series.add(sizes[i], data[i]); // Asumiendo que los índices corresponden a mil elementos cada uno
        }
        datos.addSeries(series);

        // Crear la gráfica
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Tiempo de ejecución", "Cantidad de Elementos Ordenados", "Tiempo (en ns)", datos);

        // Generar el panel donde se muestra la gráfica
        ChartPanel panel = new ChartPanel(chart);

        // Crear la ventana
        JFrame window = new JFrame("JFreeChart");
        window.getContentPane().add(panel);
        window.pack();
        window.setVisible(true);
        window.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        datos= new XYSeriesCollection();
    }
    
    public void useAll(String type){
        long[]data1= getArrayDesordenado(type);
        long[]data2 = getArrayOrdenado(type);
        long[]data3 = getArrayInvertido(type);
        // Nota: crear el archivo reverse después de ordenar
        datos = new XYSeriesCollection();
        XYSeries series = new XYSeries("caso 1: desordenado");
        for (int i = 0; i < data1.length; i++) {
            series.add(sizes[i], data1[i]); // Asumiendo que los índices corresponden a mil elementos cada uno
        }
        datos.addSeries(series);
       

        series = new XYSeries("caso 2: totalmente ordenado");
        for (int i = 0; i < data2.length; i++) {
            series.add(sizes[i], data2[i]); // Asumiendo que los índices corresponden a mil elementos cada uno
        }
        datos.addSeries(series);

        series = new XYSeries("caso 3: invertir orden");
        for (int i = 0; i < data3.length; i++) {
            series.add(sizes[i], data3[i]); // Asumiendo que los índices corresponden a mil elementos cada uno
        }
        datos.addSeries(series);

        // Crear la gráfica
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Tiempo de ejecución", "Cantidad de Elementos Ordenados", "Tiempo (en ns)", datos);

        // Generar el panel donde se muestra la gráfica
        ChartPanel panel = new ChartPanel(chart);

        // Crear la ventana
        JFrame window = new JFrame("JFreeChart");
        window.getContentPane().add(panel);
        window.pack();
        window.setVisible(true);
        window.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        datos= new XYSeriesCollection();

    }
    
    public void execute(){
          //caso 1: todo desordenado
        System.out.println("quickSort");
        long startQuickSort1 = System.nanoTime();
        sorting.quickSort(selectedArray, 0, selectedArray.length-1);
        long endQuicksort1 = System.nanoTime();
        long quickSort1 = (endQuicksort1-startQuickSort1);
        System.out.println("caso 1: completado!");
        QuickSort1[arrayInt]=quickSort1;
        
        // caso 2: todo ya ordenado
        long startQuickSort2 = System.nanoTime();
        sorting.quickSort(selectedArray, 0, selectedArray.length-1);
        long endQuickSort2=System.nanoTime();
        long quickSort2 = (endQuickSort2-startQuickSort2);
        System.out.println("caso 2: completado!");
        CA1.createArrayFileReverse(selectedArray, arrayInt);
        getArrayReverse();
        QuickSort2[arrayInt]=quickSort2;
        
        //caso 3: invertir orden
        long startQuickSort3=System.nanoTime();
        sorting.quickSort(selectedArrayReverse, 0, selectedArray.length-1);
        long endQuickSort3=System.nanoTime();
        System.out.println("caso 3: completado!");
        long quickSort3=(endQuickSort3-startQuickSort3);
        QuickSort3[arrayInt]=quickSort3;
        
        //MergeSort - caso 1: todo desordenado
        System.out.println("mergeSort");
        getArray();
        long startmergeSort1 = System.nanoTime();
        sorting.mergeSort(selectedArray, selectedArray.length);
        long endmergesort1 = System.nanoTime();
        long mergeSort1 = (endmergesort1-startmergeSort1);
        System.out.println("caso 1: completado!");
        MergeSort1[arrayInt]=mergeSort1;
        // caso 2: todo ya ordenado
        long startmergeSort2 = System.nanoTime();
        sorting.mergeSort(selectedArray, selectedArray.length);
        long endmergeSort2=System.nanoTime();
        long mergeSort2 = (endmergeSort2-startmergeSort2);
        System.out.println("caso 2: completado!");
        CA1.createArrayFileReverse(selectedArray, arrayInt);
        getArrayReverse();
        MergeSort2[arrayInt]=mergeSort2;
        //caso 3: invertir orden
        long startmergeSort3=System.nanoTime();
        sorting.mergeSort(selectedArrayReverse, selectedArrayReverse.length);
        long endmergeSort3=System.nanoTime();
        System.out.println("caso 3: completado!");
        long mergeSort3=(endmergeSort3-startmergeSort3);
        MergeSort3[arrayInt]=mergeSort3;
        
        //Arrays.sort - caso 1: todo desordenado
        System.out.println("Arrays.sort");
        getArray();
        long startArraySort1 = System.nanoTime();
        sorting.arraySort(selectedArray);
        long endArraySort1 = System.nanoTime();
        long arraySort1 = (endArraySort1-startArraySort1);
        System.out.println("caso 1: completado!");
        ArraySort1[arrayInt]=arraySort1;
        // caso 2: todo ya ordenado
        long startArraySort2 = System.nanoTime();
        sorting.arraySort(selectedArray);
        long endArraySort2=System.nanoTime();
        long arraySort2 = (endArraySort2-startArraySort2);
        System.out.println("caso 2: completado!");
        CA1.createArrayFileReverse(selectedArray, arrayInt);
        getArrayReverse();
        ArraySort2[arrayInt]=arraySort2;
        //caso 3: invertir orden
        long startArraySort3=System.nanoTime();
        sorting.arraySort(selectedArrayReverse);
        long endArraySort3=System.nanoTime();
        System.out.println("caso 3: completado!");
        long arraySort3=(endArraySort3-startArraySort3);
        ArraySort3[arrayInt]=arraySort3;
        //parallelSort - caso 1: todo desordenado
         System.out.println("parallelSort");
         getArray();
        long startParallelSort1 = System.nanoTime();
        sorting.arrayParallelSort(selectedArray);
        long endParallelSort1 = System.nanoTime();
        long parallelSort1 = (endParallelSort1-startParallelSort1);
        System.out.println("caso 1: completado!");
        ParallelSort1[arrayInt]=parallelSort1;
        
        // caso 2: todo ya ordenado
        long startParallelSort2 = System.nanoTime();
        sorting.arrayParallelSort(selectedArray);
        long endParallelSort2=System.nanoTime();
        long parallelSort2 = (endParallelSort2-startParallelSort2);
        System.out.println("caso 2: completado!");
        CA1.createArrayFileReverse(selectedArray, arrayInt);
        getArrayReverse();
        ParallelSort2[arrayInt]=parallelSort2;
        
        //caso 3: invertir orden
        //System.out.println(Arrays.toString(selectedArrayReverse));
        long startParallelSort3=System.nanoTime();
        sorting.arrayParallelSort(selectedArrayReverse);
        long endParallelSort3=System.nanoTime();
        //System.out.println(Arrays.toString(selectedArrayReverse));
        System.out.println("caso 3: completado!");
        long parallelSort3=(endParallelSort3-startParallelSort3);
        ParallelSort3[arrayInt]=parallelSort3;
        
        

    
    }
    
    public void createResultsFiles(){
        
        for(arrayInt=1;arrayInt<10;arrayInt++){
            execute();
           getArray();
           
        }
        System.out.println(Arrays.toString(QuickSort1));
        CA1.createFileResults(QuickSort1, "QuickSort - caso 1");
        CA1.createFileResults(QuickSort2, "QuickSort - caso 2");
        CA1.createFileResults(QuickSort3, "QuickSort - caso 3");
        CA1.createFileResults(MergeSort1, "mergeSort - caso 1");
        CA1.createFileResults(MergeSort2, "mergeSort - caso 2");
        CA1.createFileResults(MergeSort3, "mergeSort - caso 3");
        CA1.createFileResults(ArraySort1, "Arrays.Sort - caso 1");
        CA1.createFileResults(ArraySort2, "Arrays.Sort - caso 2");
        CA1.createFileResults(ArraySort3, "Arrays.Sort - caso 3");
        CA1.createFileResults(ParallelSort1, "parallelSort - caso 1");
        CA1.createFileResults(ParallelSort2, "parallelSort - caso 2");
        CA1.createFileResults(ParallelSort3, "parallelSort - caso 3");



    }
    
    public void getArrayReverse(){
        this.selectedArrayReverse=GA1.getArrayReverse(arrayInt);
    }
    
    public void getArray(){
        GA1 = new getArrays();
        this.selectedArray=GA1.getArray(arrayInt);
    }
    
    public void getResultsArray(){
        GA1.readAllResults();
         String[] types = {"QuickSort - caso 1","QuickSort - caso 2","QuickSort - caso 3","mergeSort - caso 1",
        "mergeSort - caso 2","mergeSort - caso 3","Arrays.Sort - caso 1",
        "Arrays.Sort - caso 2","Arrays.Sort - caso 3","parallelSort - caso 1","parallelSort - caso 2",
        "parallelSort - caso 3"};
         array.add(QuickSort1);
         array.add(QuickSort2);
         array.add(QuickSort3);
         
         array.add(MergeSort1);
         array.add(MergeSort2);
         array.add(MergeSort3);
         
         array.add(ArraySort1);
         array.add(ArraySort2);
         array.add(ArraySort3);
         
         array.add(ParallelSort1);
         array.add(ParallelSort2);
         array.add(ParallelSort3);
         
        for(int k=0;k<types.length;k++){
            array.set(k,GA1.getResultsArray(types[k]));
        }
    }
    
    public long[] getArrayDesordenado(String type){
        switch(type){
            case "QuickSort":
                return array.get(0);
            case "MergeSort":
                return array.get(3);
            case "Arrays.Sort":
                return array.get(6);
            case "ParallelSort":
                return array.get(9);
            default: 
                return null;
        }
        
        
        
    }
    
    public long[] getArrayOrdenado(String type){
       switch(type){
           case "QuickSort":
               return array.get(1);
           case "MergeSort":
               return array.get(4);
           case "Arrays.Sort":
               return array.get(7);
           case "ParallelSort":
               return array.get(10);
           default: 
               return null;
       }



   }

    public long[] getArrayInvertido(String type){
       switch(type){
           case "QuickSort":
               return array.get(2);
           case "MergeSort":
               return array.get(5);
           case "Arrays.Sort":
               return array.get(8);
           case "ParallelSort":
               return array.get(11);
           default: 
               return null;
       }        
   }
    
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton desordenadoButton;
    private javax.swing.JButton invertirButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton newResultsButton;
    private javax.swing.JButton ordenadoButton;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JButton verTodoButton;
    // End of variables declaration//GEN-END:variables
}
